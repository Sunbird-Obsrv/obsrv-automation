# Configure upload manager class to use Google Storage Upload Manager
# secor.upload.manager.class=com.pinterest.secor.uploader.GsUploadManager

############
# MUST SET #
############

# Name of the Google cloud storage bucket where log files are stored.
secor.gs.bucket={{ .Values.cloud_storage_bucket }}

# Google cloud storage path where files are stored within the bucket.
secor.gs.path={{ get (get $.Values.secor_jobs $.Release.Name) "base_path" }}

################
# END MUST SET #
################

# Use direct uploads
# WARNING: disables resumable uploads, files are uploaded in a single request
# This may help prevent IOException: insufficient data written,
# see https://github.com/pinterest/secor/issues/177
# https://cloud.google.com/storage/docs/json_api/v1/how-tos/upload
secor.gs.upload.direct=false

# Limit the amonut of API calls towards GCS
# This usually helps against exceptinos of: com.google.cloud.storage.StorageException: Error writing request body to server
# Cold/Low traffic buckets need to be "warmed" up most likely before you can increase this value.. this is untested.
# Sadly the client library doesn't say which http response code happens, ie 429 / 5xx etc.
# Also see https://cloud.google.com/storage/docs/request-rate
secor.gs.tasks.ratelimit.pr.second=2

# Old behavior of number of threads was 256 , but running this on kubernetes we experience we wanted less threads here,
# to work well with ratelimit above.
secor.gs.threadpool.fixed.size=32


# Application credentials configuration file
# https://developers.google.com/identity/protocols/application-default-credentials
# It can be empty when secor running in Google Cloud VMs with proper scopes
secor.gs.credentials.path=