commonLabels:
    system.storage: 'true'
    system.processing: 'true'
image:
  registry: docker.io
  repository: bitnami/redis
  tag: 7.0.5-debian-11-r15
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets:
    - ${docker_registry_secret_name}
architecture: standalone

commonConfiguration: |-
  # Enable RDB persistence
  save 300 100
  # Configure the number of databases
    databases 50

auth:
  enabled: false

master:
  count: 1
  podLabels:
      system.storage: 'true'
      system.processing: 'true'
  ## @param master.configuration Configuration for Redis&reg; master nodes
  ## ref: https://redis.io/topics/config
  ##
  configuration: ""
  disableCommands:
    - FLUSHALL
  ## @param master.extraFlags Array with additional command line flags for Redis&reg; master
  ## e.g:
  extraFlags:
   - "--maxmemory ${redis_master_maxmemory}"
   - "--maxmemory-policy ${redis_maxmemory_eviction_policy}"
  containerPorts:
    redis: 6379
  resources:
    limits:
      cpu: 0.5
      memory: 512Mi
    requests:
      cpu: 0.5
      memory: 512Mi
  persistence:
    enabled: true
    labels:
      system.storage: 'true'
      system.processing: 'true'
    path: ${redis_persistence_path}
    subPath: ""
    subPathExpr: ""
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: ${redis_master_persistence_size}
  sidecars:
    - name: redis-backup
      image: ${redis_backup_image_repository}:${redis_backup_image_tag}
      imagePullPolicy: IfNotPresent
      volumeMounts:
        - mountPath: ${redis_persistence_path}
          name: redis-data
      env:
        - name: REDIS_BACKUP_CRON_SCHEDULE
          value: "${redis_backup_cron_schedule}"
        - name: CLOUD_SERVICE
          value: ${cloud_store_provider}
        - name: AZURE_STORAGE_ACCOUNT_NAME
          value: ${azure_storage_account_name}
        - name: AZURE_STORAGE_ACCOUNT_KEY
          value: ${azure_storage_account_key}
        - name: AZURE_BACKUP_BUCKET
          value: ${redis_backup_azure_bucket}
        - name: S3_BACKUP_BUCKET
          value: ${redis_backup_s3_bucket}
        - name: GCS_BACKUP_BUCKET
          value: ${redis_backup_gcs_bucket}
        - name: REDIS_RDB_FILE_PATH
          value: ${redis_persistence_path}
        - name: REDIS_REPLICATION_MODE
          value: master
        - name: BACKUP_PREFIX
          value: dedup-redis
      resources:
        limits:
          cpu: 0.2
          memory: 100Mi
  serviceAccount:
    create: true
    name: ${redis_backup_service_account_name}
    annotations:
      ${redis_backup_sa_annotations}

replica:
  replicaCount: 1
  podLabels:
      system.storage: 'true'
      system.processing: 'true'
  ## @param replica.configuration Configuration for Redis&reg; replicas nodes
  ## ref: https://redis.io/topics/config
  ##
  configuration: ""
  disableCommands:
    - FLUSHALL
  ## @param replica.extraFlags Array with additional command line flags for Redis&reg; replicas
  ## e.g:
  extraFlags:
   - "--maxmemory ${redis_replica_maxmemory}"
   - "--maxmemory-policy ${redis_maxmemory_eviction_policy}"
  ## @param replica.containerPorts.redis Container port to open on Redis&reg; replicas nodes
  ##
  containerPorts:
    redis: 6379
  persistence:
    enabled: true
    labels:
      system.storage: 'true'
      system.processing: 'true'
    path: ${redis_persistence_path}
    subPath: ""
    subPathExpr: ""
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: ${redis_replica_persistence_size}
  serviceAccount:
    create: true
