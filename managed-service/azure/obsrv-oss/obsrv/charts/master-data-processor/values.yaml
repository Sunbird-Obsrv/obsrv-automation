namespace: "flink"
imagepullsecrets: ""
image:
  registry: sanketikahub
  repository: master-data-processor
  tag: release-0.5.0_RC23
serviceMonitor:
  enabled: false
replicaCount: 1

jobmanager:
  rpc_port: 6123
  blob_port: 6124
  query_port: 6125
  ui_port: 8081
  prom_port: 9250
  heap_memory: 1024
  cpu_requests: 0.7
  cpu_limits: 1

rest_port: 80
resttcp_port: 8081
service:
  type: ClusterIP

taskmanager:
  prom_port: 9251
  rpc_port: 6122
  heap_memory: 1024
  replicas: 1
  cpu_requests: 0.7
  cpu_limits: 1

checkpoint_store_type: "s3"

# AWS S3 Details
s3_access_key: ""
s3_secret_key: ""
s3_endpoint: ""
s3_path_style_access: ""

# Azure Container Details
azure_account: ""
azure_secret: ""
azure_container: ""

# Google Cloud Storage Service Account JSON Path
google_service_account_key_path: ""

dataset_registry: |
  postgres {
    host = obsrv-postgresql-hl.postgresql.svc.cluster.local
    port = 5432
    maxConnections = 2
    user = "flink"
    password = "flink"
    database = "flink"
  }

log4j_console_properties: |
  # This affects logging for both user code and Flink
  rootLogger.level = INFO
  rootLogger.appenderRef.console.ref = ConsoleAppender

  # Uncomment this if you want to _only_ change Flink's logging
  logger.flink.name = org.apache.flink
  logger.flink.level = INFO

  # The following lines keep the log level of common libraries/connectors on
  # log level INFO. The root logger does not override this. You have to manually
  # change the log levels here.
  logger.akka.name = akka
  logger.akka.level = ERROR
  logger.kafka.name= org.apache.kafka
  logger.kafka.level = ERROR
  logger.hadoop.name = org.apache.hadoop
  logger.hadoop.level = ERROR
  logger.zookeeper.name = org.apache.zookeeper
  logger.zookeeper.level = ERROR

  # Log all infos to the console
  appender.console.name = ConsoleAppender
  appender.console.type = CONSOLE
  appender.console.layout.type = PatternLayout
  appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss,SSS} %-5p %-60c %x - %m%n

  # Suppress the irrelevant (wrong) warnings from the Netty channel handler
  logger.netty.name = org.apache.flink.shaded.akka.org.jboss.netty.channel.DefaultChannelPipeline
  logger.netty.level = OFF

base_config: |
  job {
    env = "dev"
    enable.distributed.checkpointing = true
    statebackend {
      base.url = "wasbs://${azure_container}@${azure_account}/flink-jobs"
    }
  }
  kafka {
    broker-servers = "obsrv-kafka-headless.kafka.svc.cluster.local:9092"
    producer.broker-servers = "obsrv-kafka-headless.kafka.svc.cluster.local:9092"
    consumer.broker-servers = "obsrv-kafka-headless.kafka.svc.cluster.local:9092"
    zookeeper = "obsrv-kafka-headless.kafka.svc.cluster.local:2181"
    producer {
      max-request-size = 1572864
      batch.size = 98304
      linger.ms = 10
      compression = "snappy"
    }
    output.system.event.topic = ${job.env}".system.events"
  }
  task {
    parallelism = 1
    consumer.parallelism = 1
    checkpointing.interval = 30000
    checkpointing.pause.between.seconds = 5000
    restart-strategy.attempts = 3
    restart-strategy.delay = 30000 # in milli-seconds
  }

  redis.connection.timeout = 100
  redis {
    host = obsrv-redis-master.redis.svc.cluster.local
    port = 6379
  }

  redis-meta {
    host = obsrv-redis-master.redis.svc.cluster.local
    port = 6379
  }

  postgres {
    host = obsrv-postgresql-hl.postgresql.svc.cluster.local
    port = 5432
    maxConnections = 2
    user = "postgres"
    password = "postgres"
    database = "obsrv"
  }

  lms-cassandra {
    host = "localhost"
    port = "9042"
  }

master-data-processor:
  master-data-processor: |+
    include file("/data/flink/conf/baseconfig.conf")
    kafka {
      input.topic = ${job.env}".masterdata.ingest"
      output.raw.topic = ${job.env}".masterdata.raw"
      output.extractor.duplicate.topic = ${job.env}".masterdata.extractor.duplicate"
      output.failed.topic = ${job.env}".masterdata.failed"
      output.batch.failed.topic = ${job.env}".masterdata.extractor.failed"
      event.max.size = "1048576" # Max is only 1MB
      output.invalid.topic = ${job.env}".masterdata.invalid"
      output.unique.topic = ${job.env}".masterdata.unique"
      output.duplicate.topic = ${job.env}".masterdata.duplicate"
      output.transform.topic = ${job.env}".masterdata.transform"
      output.transform.failed.topic = ${job.env}".failed"
      stats.topic = ${job.env}".masterdata.stats"
      groupId = ${job.env}"-masterdata-pipeline-group"

      producer {
        max-request-size = 5242880
      }
    }

    task {
      window.time.in.seconds = 5
      window.count = 30
      window.shards = 1400
      consumer.parallelism = 1
      downstream.operators.parallelism = 1
    }

    redis {
      database {
        extractor.duplication.store.id = 1
        preprocessor.duplication.store.id = 2
        key.expiry.seconds = 3600
      }
    }

    dataset.type = "master-dataset"

  flink-conf: |+
    jobmanager.memory.flink.size: 1024m
    taskmanager.memory.flink.size: 1024m
    taskmanager.numberOfTaskSlots: 1
    jobManager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1
    scheduler-mode: reactive
    heartbeat.timeout: 8000
    heartbeat.interval: 5000
    state.savepoints.dir: file:///tmp

  job_classname: org.sunbird.obsrv.pipeline.task.MasterDataProcessorStreamTask

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

nameOverride: ""
fullnameOverride: ""

global:
  azure:
    images:
      master_data_processor:
        image: ""
        registry: ""
        digest: ""