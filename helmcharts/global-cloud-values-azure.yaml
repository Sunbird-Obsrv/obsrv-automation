global:
  cloud_storage_provider: &cloud_storage_provider "azure"
  cloud_store_provider: &cloud_store_provider "azure"
  cloud_storage_region: &cloud_storage_region "eastus2"
  postgresql_backup_cloud_bucket: &backups_bucket "obsrv-dev"
  redis_backup_cloud_bucket: &redis_backup_cloud_bucket "obsrv-dev"
  velero_backup_cloud_bucket: &velero_backup_cloud_bucket "obsrv-dev-velero"
  cloud_storage_bucket: &cloud_storage_bucket "obsrv-dev-backups"
  dataset_api_container: &dataset_api_container "dataset-api"
  config_api_container: &config_api_container "config-api"
  storage_class_name: &storage_class_name "managed-premium"
  azure_storage_account_name: &azure_storage_account_name "azure_storage_account_name"
  azure_storage_account_key: &azure_storage_account_key "azure_storage_account_key"
  container: &container "obsrv-dev"
  deep_store_type: &deep_store_type "azure"
  # required for s3 segments publishing to azure
  azure_storage_container: &azure_storage_container "obsrv-dev-backups"
  secor_storage_container: &secor_storage_container "obsrv-dev"
  azure_resource_group: &azure_resource_group "obsrv-dev"
  azure_subscription_id: &azure_subscription_id "da72f12a-e323-42b4-92d8-b3ec660b6208"
  azure_tenant_id: &azure_tenant_id ""
  azure_service_principal_id: &azure_service_principal_id ""
  azure_service_principal_key: &azure_service_principal_key ""
  checkpoint_bucket: &checkpoint_bucket "wasbs://obsrv-dev-checkpointing@obsrvdevsa.blob.core.windows.net/flink-checkpoints"
  hudi_metadata_bucket: &hudi_metadata_bucket "wasbs://hudi-table@obsrvdevsa.blob.core.windows.net"
  cloud_storage_config: |+
    '{"identity":"name","credential":"key"}'

#  spark_cloud_bucket: &spark_cloud_bucket ""
#  velero_backup_cloud_bucket: &velero_backup_cloud_bucket ""

service_accounts:
  enabled: &create_sa false

redis-service-account: &redis-service-account
  serviceAccount:
    create: *create_sa
    name: default
    annotations: {}

redis_dedup_backup_sidecar: &redis_dedup_backup_sidecar
  master:
    sidecars:
      - name: redis-backup
        image: sanketikahub/redis-backup:1.0.6-GA
        volumeMounts:
          - mountPath: "/data"
            name: redis-data
        env:
          - name: REDIS_BACKUP_CRON_SCHEDULE
            value: "00 00 * * *"
          - name: CLOUD_SERVICE
            value: *cloud_store_provider
          - name: S3_BACKUP_BUCKET
            value: *redis_backup_cloud_bucket
          - name: GCS_BACKUP_BUCKET
            value: *redis_backup_cloud_bucket
          - name: REDIS_RDB_FILE_PATH
            value: "/data"
          - name: REDIS_REPLICATION_MODE
            value: master
          - name: AZURE_STORAGE_ACCOUNT_NAME
            value: *azure_storage_account_name
          - name: AZURE_STORAGE_ACCOUNT_KEY
            value: *azure_storage_account_key
          - name: AZURE_BACKUP_BUCKET
            value: *redis_backup_cloud_bucket
          - name: BACKUP_PREFIX
            value: dedup-redis
        resources:
          limits:
            cpu: 0.2
            memory: 500Mi
    <<: *redis-service-account

redis_denorm_backup_sidecar: &redis_denorm_backup_sidecar
  master:
    sidecars:
      - name: redis-backup
        image: sanketikahub/redis-backup:1.0.6-GA
        volumeMounts:
          - mountPath: "/data"
            name: redis-data
        env:
          - name: REDIS_BACKUP_CRON_SCHEDULE
            value: "00 00 * * *"
          - name: CLOUD_SERVICE
            value: *cloud_store_provider
          - name: S3_BACKUP_BUCKET
            value: *redis_backup_cloud_bucket
          - name: GCS_BACKUP_BUCKET
            value: *redis_backup_cloud_bucket
          - name: REDIS_RDB_FILE_PATH
            value: "/data"
          - name: REDIS_REPLICATION_MODE
            value: master
          - name: AZURE_STORAGE_ACCOUNT_NAME
            value: *azure_storage_account_name
          - name: AZURE_STORAGE_ACCOUNT_KEY
            value: *azure_storage_account_key
          - name: AZURE_BACKUP_BUCKET
            value: *redis_backup_cloud_bucket
          - name: BACKUP_PREFIX
            value: denorm-redis
        resources:
          limits:
            cpu: 0.2
            memory: 500Mi
    <<: *redis-service-account

velero_backup_storageLocation: &velero_backup_storageLocation
  name: default
  provider: *cloud_store_provider
  bucket: *velero_backup_cloud_bucket
  config:
    storageAccount: *azure_storage_account_name
    resourceGroup: *azure_resource_group
    subscriptionId: *azure_subscription_id

velero_volume_snapshot: &velero_volume_snapshot
  name: default
  namespace: velero
  config:
    resourceGroup: *azure_resource_group
    subscriptionId: *azure_subscription_id
    apiTimeout: 30s

# AZURE_CLIENT_ID = application ID
# AZURE_CLIENT_SECRET = secret associated with the APP

velero-backup: &velero-backup
  serviceAccount:
    enabled: *create_sa
    create: *create_sa
  credentials:
    useSecret: true
    secretContents:
      cloud: |
        AZURE_CLIENT_ID=AZURE_CLIENT_ID
        AZURE_CLIENT_SECRET=AZURE_CLIENT_SECRET
        AZURE_CLOUD_NAME=AzurePublicCloud
        AZURE_RESOURCE_GROUP=AZURE_RESOURCE_GROUP
        AZURE_SUBSCRIPTION_ID=AZURE_SUBSCRIPTION_ID
        AZURE_TENANT_ID=AZURE_TENANT_ID
  configuration:
    provider: *cloud_store_provider
    backupStorageLocation:
      <<: *velero_backup_storageLocation
    volumeSnapshotLocation:
      <<: *velero_volume_snapshot
  initContainers:
    - name: velero-plugin-for-azure
      image: velero/velero-plugin-for-microsoft-azure:v1.2.0
      imagePullPolicy: IfNotPresent
      volumeMounts:
        - mountPath: /target
          name: plugins

redis-denorm:
  <<: *redis_denorm_backup_sidecar

redis-dedup:
  <<: *redis_dedup_backup_sidecar

velero:
  <<: *velero-backup

dataset-api-service-account: &dataset-api-service-account
  serviceAccount:
    create: *create_sa
    annotations: {}

config-api-service-account: &config-api-service-account
serviceAccount:
  create: *create_sa
  annotations: {}  

dataset-api:
  <<: *dataset-api-service-account

config-api:
  <<: *config-api-service-account


druid-raw-service-account: &druid-raw-service-account
  serviceAccount:
    create: *create_sa
    name: druid-raw-sa
    annotations: {}

druid-raw-cluster:
  druid_deepstorage_type: *deep_store_type
  druid_indexer_logs_type: *deep_store_type
  storageClass: *storage_class_name
  azure_storage_account_name: *azure_storage_account_name
  azure_storage_account_key: *azure_storage_account_key
  azure_storage_container: *cloud_storage_bucket
  <<: *druid-raw-service-account

secor-service-account: &secor-service-account
  serviceAccount:
    create: *create_sa
    name: secor-sa
    annotations: {}

secor:
  cloud_store_provider: *cloud_store_provider
  storageClass: *storage_class_name
  azure_account: *azure_storage_account_name
  azure_secret: *azure_storage_account_key
  azure_container_name: *secor_storage_container
  storage_type: *cloud_store_provider
  <<: *secor-service-account

flink-checkpointing: &flink-checkpointing
  enabled: true
  statebackend: *checkpoint_bucket

flink-service-account: &flink-service-account
  serviceAccount:
    create: *create_sa
    name: flink-sa
    annotations: {}

flink:
  <<: *flink-service-account
  checkpoint_store_type: *cloud_store_provider
  checkpointing:
    <<: *flink-checkpointing

spark:
  persistence:
    masterTmp:
      storageClassName: *storage_class_name
    workerTmp:
      storageClassName: *storage_class_name
    masterMetadata:
      storageClassName: *storage_class_name
    workerMetadata:
      storageClassName: *storage_class_name
  cloud_provider: *cloud_storage_provider

kong:
  proxy:
    annotations: {}

loki:
  storage:
    type: *storage_class_name
  compactor:
    retention_enabled: true
    working_directory: /var/loki/compactor/retention

postgres-backup-service-account: &postgres-backup-service-account
  serviceAccount:
    create: *create_sa
    name: postgresql-backup-sa
    annotations: {}

postgresql-backup:
  <<: *postgres-backup-service-account

promitor-agent-scraper_auth: &promitor-agent-scraper_auth
  mode: "ServicePrincipal"
  identity:
    id: *azure_service_principal_id
    key: *azure_service_principal_key

promitor-agent-scraper_metadata: &promitor-agent-scraper_metadata
  tenantId: *azure_tenant_id
  subscriptionId: *azure_subscription_id
  resourceGroupName: *azure_resource_group

promitor-agent-scraper:
  azureAuthentication:
    <<: *promitor-agent-scraper_auth
  azureMetadata:
    <<: *promitor-agent-scraper_metadata
  metrics: []

lakehouse-connector-service-account: &lakehouse-connector-service-account
  create: *create_sa
  name: flink-sa
  annotations: {}

hadoop_core_site: &hadoop_core_site
  fs.azure.wasb.account.name: *azure_storage_account_name
  fs.azure.account.key.obsrvdevsa.blob.core.windows.net: *azure_storage_account_key

lakehouse-connector:
  hadoop_core_site: 
      <<: *hadoop_core_site
  serviceAccount: 
    <<: *lakehouse-connector-service-account
  checkpointing:
    <<: *flink-checkpointing
    
trino:
  additionalCatalogs: 
    lakehouse: |-
      connector.name=hudi
      hive.metastore.uri=thrift://hudi-hms.hms.svc:9083
      hive.azure.wasb-storage-account:{{ .Values.global.azure_storage_account_name }}
      hive.azure.wasb-access-key:{{ .Values.global.azure_storage_account_key }}

hms_env: &hms_env
  WAREHOUSE_DIR: *hudi_metadata_bucket

hms:
  envVars:
    <<: *hms_env
  hadoop_core_site:
    fs.azure.account.key.obsrvdevsa.blob.core.windows.net: *azure_storage_account_key
    fs.azure.account.keyprovider.obsrvdevsa.blob.core.windows.net: "org.apache.hadoop.fs.azure.SimpleKeyProvider"
    hive.metastore.warehouse.dir: *hudi_metadata_bucket