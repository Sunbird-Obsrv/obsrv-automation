nameOverride: "nlq-api"
fullnameOverride: "nlq-api"

replicaCount: 1

namespace: nlq
global:
  image:
    registry: "sanketikahub"

registry: ""
repository: text2sql
tag: "0.1.0"
digest: ""

imagePullPolicy: Always
imagePullSecrets: []

commonAnnotations: {}

podAnnotations: {}

podSecurityContext:
  {}
  # runAsNonRoot: true
  # runAsUser: 1001
  # fsGroup: 1001

securityContext:
  {}
  # readOnlyRootFilesystem: false
  # capabilities:
  #   drop:
  #   - ALL

# This block is an interface for k8s service spec.
service:
  type: ClusterIP
  ports:
    - name: http
      port: 8501
      targetPort: 8501

ingress:
  enabled: false
  annotations: {}
  hosts:
    - paths:
        - /
      # host: chart-example.local

resources:
  requests:
    cpu: 0.5
    memory: 512Mi
  limits:
    cpu: 0.5
    memory: 1Gi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80

livenessProbe:
  {}
  # httpGet:
  #   path: "/healthz"
  #   port: 8080
  # initialDelaySeconds: 5
  # periodSeconds: 5

readinessProbe:
  {}
  # httpGet:
  #   path: "/ready"
  #   port: 8080
  # initialDelaySeconds: 5
  # periodSeconds: 5

nodeSelector: {}
tolerations: []
affinity: {}

configmap:
  enabled: false
  mountPath: /config

serviceAccount:
  create: false
  annotations: {}

serviceMonitor:
  enabled: false
  selectorLabels:
    release: nlq
  endpoints:
    - port: http
      path: /metrics
      interval: 30s
      scrapeTimeout: 10s
      honorLabels: true

# Example values.yaml structure
initContainers:
  {}
  # - name: init-myservice
  #   image: busybox:1.28
  #   command: ['sh', '-c', "until nslookup kubernetes.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]

sidecars:
  {}
  # - name: log-reader # Sidecar container
  #   image: busybox # Use another busybox image
  #   command: ["/bin/sh"] # Override the default command
  #   args: ["-c", "tail -f /var/log/app.log"] # Run a shell script that tails the log file

druid_url: "http://{{ .Values.global.druid.host }}:{{ .Values.global.druid.port }}"
openai_api_key: "testkey"
