nameOverride: "dataset-api"
fullnameOverride: "dataset-api"

replicaCount: 1

namespace: dataset-api
global:
  image:
    registry: "sanketikahub"

registry: ""
repository: obsrv-api-service
tag: "1.0.0-GA"
digest: ""

imagePullPolicy: IfNotPresent
imagePullSecrets: []

commonLabels:
  system.dataset.management: "true"

commonAnnotations: {}

podAnnotations: {}

podSecurityContext:
  {}
  # runAsNonRoot: true
  # runAsUser: 1001
  # fsGroup: 1001

securityContext:
  {}
  # readOnlyRootFilesystem: false
  # capabilities:
  #   drop:
  #   - ALL

# This block is an interface for k8s service spec.
service:
  type: ClusterIP
  ports:
    - name: http
      port: 3000
      targetPort: 3000

ingress:
  enabled: false
  annotations: {}
  hosts:
    - paths:
        - /
      # host: chart-example.local

resources:
  requests:
    cpu: 0.5
    memory: 512Mi
  limits:
    cpu: 0.5
    memory: 1Gi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80

livenessProbe:
  {}
  # httpGet:
  #   path: "/healthz"
  #   port: 8080
  # initialDelaySeconds: 5
  # periodSeconds: 5

readinessProbe:
  {}
  # httpGet:
  #   path: "/ready"
  #   port: 8080
  # initialDelaySeconds: 5
  # periodSeconds: 5

nodeSelector: {}
tolerations: []
affinity: {}

configmap:
  enabled: true
  mountPath: /config

serviceAccount:
  create: true
  annotations: {}

serviceMonitor:
  enabled: true
  selectorLabels:
    release: monitoring
  endpoints:
    # - port: http # the name of the port in your service, assuming the primary service port is named 'http' in this example.
    #   path: /metrics
    #   interval: 30s
    #   scrapeTimeout: 10s
    #   honorLabels: true
    - port: http
      path: /metrics
      interval: 30s
      scrapeTimeout: 10s
      honorLabels: true

# Example values.yaml structure
initContainers:
  {}
  # - name: init-myservice
  #   image: busybox:1.28
  #   command: ['sh', '-c', "until nslookup kubernetes.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]

sidecars:
  {}
  # - name: log-reader # Sidecar container
  #   image: busybox # Use another busybox image
  #   command: ["/bin/sh"] # Override the default command
  #   args: ["-c", "tail -f /var/log/app.log"] # Run a shell script that tails the log file

command_api_path: "/obsrv/v1/system/dataset/command"
env:
  system_env: "{{ .Values.global.env }}"
  api_port: "3000"
  telemetry_kafka_compression: snappy
  druid_host: "http://{{ .Values.global.druid.host }}"
  druid_port: "{{ .Values.global.druid.port }}"
  kafka_host: "{{ .Values.global.kafka.host }}"
  kafka_port: "{{ .Values.global.kafka.port }}"
  client_id: "obsrv-apis"
  kafka_initial_retry_time: "3000"
  kafka_retries: "5"
  kafka_connection_timeout: "5000"
  postgres_host: "{{ .Values.global.postgresql.host }}"
  postgres_port: "{{ .Values.global.postgresql.port }}"
  postgres_username: "{{ .Values.postgresqlUser | default .Values.global.postgresql.username }}"
  postgres_password: "{{ .Values.postgresqlPassword | default .Values.global.postgresql.password }}"
  postgres_database: obsrv
  denorm_redis_host: "{{ .Values.global.redis_denorm.host }}"
  denorm_redis_port: "{{ .Values.global.redis_denorm.port }}"
  dedup_redis_host: "{{ .Values.global.redis_dedup.host }}"
  dedup_redis_port: "{{ .Values.global.redis_dedup.port }}"
  cloud_storage_provider: "{{ .Values.global.cloud_storage_provider }}"
  cloud_storage_region: "{{ .Values.global.cloud_storage_region }}"
  container: "{{ .Values.global.dataset_api_cloud_bucket }}"
  container_prefix: "connector-registry"
  storage_url_expiry: "3600"
  exhaust_query_range: "31" # In Days
  max_query_threshold: "5000"
  max_query_limit: "5000"
  max_date_range: "30"
  exclude_datasource_validation: "system-stats,failed-events-summary,masterdata-system-stats,system-events"
  object_key: authenticationMechanism
  encryption_key: "{{ .Values.global.encryption_key }}"
  command_service_host: "http://command-api.command-api.svc"
  command_service_port: "8000"
  grafana_url: "http://grafana.monitoring.svc"
  GRAFANA_ADMIN_URL: http://grafana.monitoring.svc.cluster.local
  pipeline_merged_job_manager_url: "http://unified-pipeline-jobmanager.{{.Values.global.flink.namespace}}.svc.cluster.local:8081"
  masterdata_processor_job_manager_url: "http://master-data-processor-ext-jobmanager.{{.Values.global.flink.namespace}}.svc.cluster.local:8081"
  prometheus_url: "{{ .Values.global.prometheus.url }}"
  user_token_public_key: ""
  is_RBAC_enabled: "false"
  user_token_keycloak_public_key: ""
  keycloak_audience: ""