nameOverride: ""
fullnameOverride: ""
namespace: ""

replicaCount: 1

global:
  image:
    registry: "sanketikahub"

registry: ""
repository: "nginx"
tag: "latest"
digest: ""

imagePullPolicy: IfNotPresent
imagePullSecrets: []

commonLabels: {}

commonAnnotations: {}

podAnnotations: {}

podSecurityContext: {}
  # runAsNonRoot: true
  # runAsUser: 1001
  # fsGroup: 1001

securityContext: {}
  # readOnlyRootFilesystem: false
  # capabilities:
  #   drop:
  #   - ALL

# This block is an interface for k8s service spec.
service:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 80

ingress:
  enabled: false
  annotations: {}
  hosts:
    - paths:
      - /
      # host: chart-example.local

resources: {}

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80

livenessProbe: {}
  # httpGet:
  #   path: "/healthz"
  #   port: 8080
  # initialDelaySeconds: 5
  # periodSeconds: 5

readinessProbe: {}
  # httpGet:
  #   path: "/ready"
  #   port: 8080
  # initialDelaySeconds: 5
  # periodSeconds: 5

nodeSelector: {}
tolerations: []
affinity: {}

configmap:
  enabled: true
  mountPath: /config

serviceAccount:
  create: true
  annotations: {}

rbac:
  enabled: false
  useClusterRole: false
  rules:
    - apiGroups: [""]
      resources: ["pods"]
      verbs: ["get", "list", "watch"]
    - apiGroups: [""]
      resources: ["services"]
      verbs: ["get", "list", "watch"]


serviceMonitor:
  enabled: false
  selectorLabels:
    release: monitoring
  endpoints: []
  # - port: http # the name of the port in your service, assuming the primary service port is named 'http' in this example.
  #   path: /metrics
  #   interval: 30s
  #   scrapeTimeout: 10s
  #   honorLabels: true

sidecars: {}
  # - name: log-reader # Sidecar container
  #   image: busybox # Use another busybox image
  #   command: ["/bin/sh"] # Override the default command
  #   args: ["-c", "tail -f /var/log/app.log"] # Run a shell script that tails the log file

deployment:
  initContainers: []
    # - name: init-myservice
    #   image: busybox:1.28
    #   command: ['sh', '-c', "until nslookup kubernetes.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
statefulset:
  # Example values.yaml structure
  initContainers: []
    # - name: init-myservice
    #   image: busybox:1.28
    #   command: ['sh', '-c', "until nslookup kubernetes.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]

persistence:
  enabled: true
  storageClass: ""
  size: 1Gi
cronjob:
  schedule: "*/5 * * * *"
